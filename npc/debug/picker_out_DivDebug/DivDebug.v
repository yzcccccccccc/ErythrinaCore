// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DivCore(	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
  input         clock,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
                reset,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
                io_in_v,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
  input  [32:0] io_a,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
                io_b,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
  output [32:0] io_quot,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
                io_rem,	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
  output        io_out_v	// @[src/vsrc/erythcore/fu/div/DivCore.scala:7:16]
);

  reg  [5:0]  compute_cnt;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:19:30]
  reg  [1:0]  state;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24]
  reg  [1:0]  casez_tmp;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:22:19, :24:39]
  always_comb begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24, :22:19, :24:39, :29:51, :36:19]
    casez (state)	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24, :22:19, :24:39, :29:51, :36:19]
      2'b00:
        casez_tmp = io_in_v ? 2'h1 : state;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24, :22:19, :24:39, :25:23, :29:51, :36:19]
      2'b01:
        casez_tmp = compute_cnt == 6'h1 ? 2'h2 : state;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :19:30, :21:24, :22:19, :24:39, :29:{31,51}, :30:23, :31:33, :36:19]
      2'b10:
        casez_tmp = 2'h0;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24, :22:19, :24:39, :29:51, :36:19]
      default:
        casez_tmp = state;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24, :22:19, :24:39, :29:51, :36:19]
    endcase	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24, :22:19, :24:39, :29:51, :36:19]
  end // always_comb
  reg  [32:0] quot_r;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:53:22]
  reg  [32:0] rem_r;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:54:22]
  wire        _GEN = state == 2'h1;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24, :22:19]
  wire        _GEN_0 = state == 2'h0 & io_in_v;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24, :22:19, :40:27]
  wire [32:0] b = io_b[32] ? ~io_b + 33'h1 : io_b;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:48:22, :50:{16,26,32}]
  wire [32:0] _neg_b_T_1 = ~b + 33'h1;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:50:16, :51:{18,21}]
  always @(posedge clock) begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
    if (reset) begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      compute_cnt <= 6'h0;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:19:30]
      state <= 2'h0;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24]
    end
    else begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      if (_GEN_0)	// @[src/vsrc/erythcore/fu/div/DivCore.scala:40:27]
        compute_cnt <= 6'h20;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:19:30]
      else if (_GEN)	// @[src/vsrc/erythcore/fu/div/DivCore.scala:22:19]
        compute_cnt <= compute_cnt - 6'h1;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:19:30, :43:36]
      state <= casez_tmp;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:21:24, :22:19, :24:39]
    end
    if (_GEN) begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:22:19]
      quot_r <= {quot_r[30:0], ~(rem_r[32]), 1'h0};	// @[src/vsrc/erythcore/fu/div/DivCore.scala:53:22, :54:22, :57:{45,51}, :62:{22,32}]
      rem_r <= {rem_r[31:0], 1'h0} + (rem_r[32] ? b : _neg_b_T_1);	// @[src/vsrc/erythcore/fu/div/DivCore.scala:50:16, :51:21, :54:22, :57:51, :66:{29,53,58}]
    end
    else if (_GEN_0) begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:40:27]
      quot_r <= 33'h0;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:53:22]
      rem_r <= (io_a[32] ? ~io_a + 33'h1 : io_a) + _neg_b_T_1;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:47:22, :49:{16,26,32}, :51:21, :54:22, :68:22]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
    initial begin	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
        end	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
        compute_cnt = _RANDOM[2'h0][5:0];	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :19:30]
        state = _RANDOM[2'h0][7:6];	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :19:30, :21:24]
        quot_r = {_RANDOM[2'h0][31:8], _RANDOM[2'h1][8:0]};	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :19:30, :53:22]
        rem_r = {_RANDOM[2'h1][31:9], _RANDOM[2'h2][9:0]};	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :53:22, :54:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_quot =
    io_a[32] ^ io_b[32]
      ? {~(quot_r[31:0]), rem_r[32]} + 33'h1
      : {quot_r[31:0], ~(rem_r[32])};	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :47:22, :48:22, :53:22, :54:22, :57:{31,51}, :75:{26,47}, :76:{19,27,37,47}]
  assign io_rem = rem_r;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :54:22]
  assign io_out_v = state == 2'h2;	// @[src/vsrc/erythcore/fu/div/DivCore.scala:6:7, :21:24, :78:23]
endmodule

module DivDebug(	// @[src/vsrc/erythcore/fu/div/Divisor.scala:7:7]
  input         clock,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:7:7]
                reset,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:7:7]
                io_v,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
  input  [31:0] io_a,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
                io_b,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
  input  [1:0]  io_op,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
  output [31:0] io_res,	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
  output        io_res_valid	// @[src/vsrc/erythcore/fu/div/Divisor.scala:8:16]
);

  wire [32:0] _div_inst_io_quot;	// @[src/vsrc/erythcore/fu/div/Divisor.scala:19:26]
  wire [32:0] _div_inst_io_rem;	// @[src/vsrc/erythcore/fu/div/Divisor.scala:19:26]
  DivCore div_inst (	// @[src/vsrc/erythcore/fu/div/Divisor.scala:19:26]
    .clock    (clock),
    .reset    (reset),
    .io_in_v  (io_v),
    .io_a     ({~(io_op[0]) & io_a[31], io_a}),	// @[src/vsrc/erythcore/fu/div/Divisor.scala:21:{26,28}, :22:26, :26:{22,28}]
    .io_b     ({~(io_op[1]) & io_b[31], io_b}),	// @[src/vsrc/erythcore/fu/div/Divisor.scala:23:{26,28}, :24:26, :27:{22,28}]
    .io_quot  (_div_inst_io_quot),
    .io_rem   (_div_inst_io_rem),
    .io_out_v (io_res_valid)
  );	// @[src/vsrc/erythcore/fu/div/Divisor.scala:19:26]
  assign io_res = io_op[1] ? _div_inst_io_rem[31:0] : _div_inst_io_quot[31:0];	// @[src/vsrc/erythcore/fu/div/Divisor.scala:7:7, :19:26, :27:28, :35:18]
endmodule

