# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UT_DivDebug
else:
    import _UT_DivDebug

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UT_DivDebug.delete_SwigPyIterator

    def value(self):
        return _UT_DivDebug.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UT_DivDebug.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UT_DivDebug.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UT_DivDebug.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UT_DivDebug.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UT_DivDebug.SwigPyIterator_copy(self)

    def next(self):
        return _UT_DivDebug.SwigPyIterator_next(self)

    def __next__(self):
        return _UT_DivDebug.SwigPyIterator___next__(self)

    def previous(self):
        return _UT_DivDebug.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UT_DivDebug.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UT_DivDebug.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UT_DivDebug.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UT_DivDebug.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UT_DivDebug.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UT_DivDebug.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UT_DivDebug.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _UT_DivDebug:
_UT_DivDebug.SwigPyIterator_swigregister(SwigPyIterator)
class DutBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    cycle = property(_UT_DivDebug.DutBase_cycle_get, _UT_DivDebug.DutBase_cycle_set)
    argc = property(_UT_DivDebug.DutBase_argc_get, _UT_DivDebug.DutBase_argc_set)
    argv = property(_UT_DivDebug.DutBase_argv_get, _UT_DivDebug.DutBase_argv_set)
    __swig_destroy__ = _UT_DivDebug.delete_DutBase

    def step(self, *args):
        return _UT_DivDebug.DutBase_step(self, *args)

    def finalize(self):
        return _UT_DivDebug.DutBase_finalize(self)

    def set_waveform(self, filename):
        return _UT_DivDebug.DutBase_set_waveform(self, filename)

    def set_coverage(self, filename):
        return _UT_DivDebug.DutBase_set_coverage(self, filename)

# Register DutBase in _UT_DivDebug:
_UT_DivDebug.DutBase_swigregister(DutBase)
class DutVerilatorBase(DutBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    top = property(_UT_DivDebug.DutVerilatorBase_top_get, _UT_DivDebug.DutVerilatorBase_top_set)

    def init(self, arg2, arg3):
        return _UT_DivDebug.DutVerilatorBase_init(self, arg2, arg3)

    def __init__(self, *args):
        _UT_DivDebug.DutVerilatorBase_swiginit(self, _UT_DivDebug.new_DutVerilatorBase(*args))
    __swig_destroy__ = _UT_DivDebug.delete_DutVerilatorBase

    def step_nodump(self):
        return _UT_DivDebug.DutVerilatorBase_step_nodump(self)

    def step(self, *args):
        return _UT_DivDebug.DutVerilatorBase_step(self, *args)

    def finalize(self):
        return _UT_DivDebug.DutVerilatorBase_finalize(self)

    def set_waveform(self, filename):
        return _UT_DivDebug.DutVerilatorBase_set_waveform(self, filename)

    def set_coverage(self, filename):
        return _UT_DivDebug.DutVerilatorBase_set_coverage(self, filename)

# Register DutVerilatorBase in _UT_DivDebug:
_UT_DivDebug.DutVerilatorBase_swigregister(DutVerilatorBase)
class DutUnifiedBase(DutVerilatorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DutUnifiedBase:
            _self = None
        else:
            _self = self
        _UT_DivDebug.DutUnifiedBase_swiginit(self, _UT_DivDebug.new_DutUnifiedBase(_self, *args))
    __swig_destroy__ = _UT_DivDebug.delete_DutUnifiedBase

    def finalize(self):
        return _UT_DivDebug.DutUnifiedBase_finalize(self)

    def set_waveform(self, filename):
        return _UT_DivDebug.DutUnifiedBase_set_waveform(self, filename)

    def set_coverage(self, filename):
        return _UT_DivDebug.DutUnifiedBase_set_coverage(self, filename)
    def __disown__(self):
        self.this.disown()
        _UT_DivDebug.disown_DutUnifiedBase(self)
        return weakref.proxy(self)

# Register DutUnifiedBase in _UT_DivDebug:
_UT_DivDebug.DutUnifiedBase_swigregister(DutUnifiedBase)

def get_clock(value):
    return _UT_DivDebug.get_clock(value)

def get_io_a(value):
    return _UT_DivDebug.get_io_a(value)

def get_io_b(value):
    return _UT_DivDebug.get_io_b(value)

def get_io_op(value):
    return _UT_DivDebug.get_io_op(value)

def get_io_res(value):
    return _UT_DivDebug.get_io_res(value)

def get_io_res_valid(value):
    return _UT_DivDebug.get_io_res_valid(value)

def get_io_v(value):
    return _UT_DivDebug.get_io_v(value)

def get_reset(value):
    return _UT_DivDebug.get_reset(value)

def set_clock(value):
    return _UT_DivDebug.set_clock(value)

def set_io_a(value):
    return _UT_DivDebug.set_io_a(value)

def set_io_b(value):
    return _UT_DivDebug.set_io_b(value)

def set_io_op(value):
    return _UT_DivDebug.set_io_op(value)

def set_io_res(value):
    return _UT_DivDebug.set_io_res(value)

def set_io_res_valid(value):
    return _UT_DivDebug.set_io_res_valid(value)

def set_io_v(value):
    return _UT_DivDebug.set_io_v(value)

def set_reset(value):
    return _UT_DivDebug.set_reset(value)
DPIRclock = _UT_DivDebug.DPIRclock
DPIWclock = _UT_DivDebug.DPIWclock
DPIRreset = _UT_DivDebug.DPIRreset
DPIWreset = _UT_DivDebug.DPIWreset
DPIRio_v = _UT_DivDebug.DPIRio_v
DPIWio_v = _UT_DivDebug.DPIWio_v
DPIRio_a = _UT_DivDebug.DPIRio_a
DPIWio_a = _UT_DivDebug.DPIWio_a
DPIRio_b = _UT_DivDebug.DPIRio_b
DPIWio_b = _UT_DivDebug.DPIWio_b
DPIRio_op = _UT_DivDebug.DPIRio_op
DPIWio_op = _UT_DivDebug.DPIWio_op
DPIRio_res = _UT_DivDebug.DPIRio_res
DPIWio_res = _UT_DivDebug.DPIWio_res
DPIRio_res_valid = _UT_DivDebug.DPIRio_res_valid
DPIWio_res_valid = _UT_DivDebug.DPIWio_res_valid

